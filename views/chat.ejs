<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
    <style>
        /* General Styles */
        body {
            font-family: 'Arial', sans-serif;
            background: #f0f2f5;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }

        /* Chat Container */
        .chat-container {
            width: 600px;
            height: 80vh;
            background: white;
            border-radius: 12px;
            box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.15);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        /* Chat Header */
        .chat-header {
            background: #3d6a25;
            color: white;
            padding: 15px;
            text-align: center;
            font-size: 18px;
            font-weight: bold;
        }

        /* Chat Messages Box */
        #chatBox {
            flex-grow: 1;
            padding: 15px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 10px;
            background: #f9f9f9;
        }

        /* Chat Messages */
        .message {
            max-width: 75%;
            padding: 12px 16px;
            border-radius: 18px;
            font-size: 14px;
            box-shadow: 2px 3px 6px rgba(0, 0, 0, 0.1);
            word-wrap: break-word;
        }

        .sent {
            background: #3d6a25;
            color: white;
            align-self: flex-end;
            text-align: right;
        }

        .received {
            background: #eaeaea;
            color: #333;
            align-self: flex-start;
            text-align: left;
        }

        .message small {
            display: block;
            font-size: 10px;
            color: rgba(255, 255, 255, 0.8);
            margin-top: 5px;
        }

        .received small {
            color: #666;
        }

        /* Chat Input Box */
        .chat-footer {
            display: flex;
            padding: 12px;
            background: white;
            border-top: 1px solid #ddd;
        }

        .chat-input {
            flex-grow: 1;
            padding: 12px;
            border-radius: 20px;
            border: 1px solid #3d6a25;
            font-size: 14px;
            outline: none;
        }

        .chat-input:focus {
            border-color: #3d6a25;
            box-shadow: 0px 0px 6px rgba(61, 106, 37, 0.5);
        }

        .send-btn {
            background: #3d6a25;
            color: white;
            border: none;
            padding: 12px 15px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 14px;
            margin-left: 10px;
            transition: 0.3s;
        }

        .send-btn:hover {
            background: #2d511c;
        }

    </style>
</head>
<body>

    <!-- Chat Container -->
    <div class="chat-container">
        
        <!-- Chat Header -->
        <div class="chat-header">
            Chat with <%= receiverName %>
        </div>

        <!-- Hidden input fields to store IDs -->
        <input type="hidden" id="senderId" value="<%= senderId %>">
        <input type="hidden" id="receiverId" value="<%= receiverId %>">
        <input type="hidden" id="requestId" value="<%= requestId %>">

        <!-- Chat Messages -->
        <div id="chatBox">
            <% messages.forEach(message => { %>
                <div class="message <%= message.sender_id === senderId ? 'sent' : 'received' %>">
                    <strong>
                        <%= message.sender_id === senderId ? "You" : receiverName %>:
                    </strong>
                    <%= message.message %>
                    <small><%= new Date(message.timestamp).toLocaleString() %></small>
                </div>
            <% }); %>
        </div>

        <!-- Chat Input -->
        <div class="chat-footer">
            <input type="text" id="messageInput" class="chat-input" placeholder="Type a message...">
            <button id="sendBtn" class="send-btn">Send</button>
        </div>

    </div>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const senderId = document.getElementById("senderId").value;
            const receiverId = document.getElementById("receiverId").value;
            const requestId = document.getElementById("requestId").value;
            const chatBox = document.getElementById("chatBox");
            const messageInput = document.getElementById("messageInput");
            const sendBtn = document.getElementById("sendBtn");

            messageInput.focus(); // Auto-focus on input field

            // Auto-scroll to bottom on load
            chatBox.scrollTop = chatBox.scrollHeight;

            // Connect WebSocket
            const socket = new WebSocket("ws://localhost:5000");

            socket.onopen = () => {
                console.log("WebSocket Connected");
                socket.send(JSON.stringify({ type: "connect", userId: senderId }));
            };

            socket.onmessage = (event) => {
                const data = JSON.parse(event.data);
                console.log("ðŸ“© Received:", data);

                if (data.type === "chat") {
                    const msgDiv = document.createElement("div");
                    msgDiv.classList.add("message", data.senderId === senderId ? "sent" : "received");
                    msgDiv.innerHTML = `<strong>${data.senderId === senderId ? "You" : receiverName}:</strong> ${data.messageText} 
                                        <small>Just now</small>`;
                    chatBox.appendChild(msgDiv);
                    chatBox.scrollTop = chatBox.scrollHeight;
                }
            };

            sendBtn.addEventListener("click", () => {
                sendMessage();
            });

            messageInput.addEventListener("keypress", (e) => {
                if (e.key === "Enter") {
                    sendMessage();
                }
            });

            async function sendMessage() {
                const message = messageInput.value.trim();
                if (message === "") return;

                const newMessage = {
                    type: "chat",
                    senderId,
                    receiverId,
                    requestId,
                    messageText: message,
                };

                console.log("Sending message:", newMessage);
                socket.send(JSON.stringify(newMessage));

                try {
                    await fetch('/storeMessage', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(newMessage)
                    });
                } catch (error) {
                    console.error('Error storing message:', error);
                }

                const msgDiv = document.createElement("div");
                msgDiv.classList.add("message", "sent");
                msgDiv.innerHTML = `<strong>You:</strong> ${message} <small>Just now</small>`;
                chatBox.appendChild(msgDiv);
                chatBox.scrollTop = chatBox.scrollHeight;
                messageInput.value = "";
            }
        });
    </script>    

</body>
</html>
